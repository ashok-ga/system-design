{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to System Design Hub","text":""},{"location":"#what-is-this","title":"\ud83d\ude80 What is This?","text":"<p>System Design Hub is a collaborative, open-source resource for learning, teaching, and documenting High-Level Design (HLD) and Low-Level Design (LLD) of software and hardware systems.</p> <p>Whether you are preparing for interviews, architecting a real-world solution, or seeking reference designs, you\u2019ll find clear explanations, diagrams, and design patterns here.</p>"},{"location":"#what-youll-find-here","title":"\ud83d\udcd6 What You'll Find Here","text":"<ul> <li>HLD Docs: Architectural overviews, technology choices, design decisions, major flows, and system context diagrams.</li> <li>LLD Docs: Detailed module specs, class diagrams, sequence diagrams, interface contracts, and logic flows.</li> <li>Diagrams &amp; Visuals: All key concepts are illustrated wherever possible.</li> <li>References: Further reading, links, standards, and best-practice guides.</li> <li>Contribution Guide: Friendly guidance for adding your own designs or improvements.</li> </ul>"},{"location":"#how-this-repository-is-organized","title":"\ud83d\uddc2\ufe0f How This Repository is Organized","text":"<ul> <li><code>hld/</code>: High-Level Design (system overviews, architectures, context)</li> <li><code>lld/</code>: Low-Level Design (detailed modules, APIs, data flows)</li> <li><code>assets/</code>: Shared images and diagrams</li> <li><code>references.md</code>: Papers, blog posts, books, and other resources</li> </ul> <p>Browse using the navigation sidebar or the links above!</p>"},{"location":"#how-to-contribute","title":"\ud83e\udd1d How to Contribute","text":"<p>We welcome your input! - Read the CONTRIBUTING.md for how to start. - Add your system designs, diagrams, or improvements. - Open issues for suggestions, bugs, or topic requests.</p> <p>Let\u2019s make system design knowledge accessible for all.</p>"},{"location":"#who-is-this-for","title":"\ud83d\udce3 Who is This For?","text":"<ul> <li>System architects</li> <li>Backend and full-stack developers</li> <li>Students and interview candidates</li> <li>Hardware and embedded designers</li> <li>Curious engineers</li> </ul> <p>If you want to understand, teach, or build real systems, this is for you!</p>"},{"location":"#star-the-repo-and-share-with-friends-if-you-find-it-useful","title":"\u2b50\ufe0f Star the repo and share with friends if you find it useful!","text":"<p>Happy Designing!</p>"},{"location":"references/","title":"References &amp; Further Reading","text":""},{"location":"references/#books","title":"Books","text":"<ul> <li>Designing Data-Intensive Applications \u2013 Martin Kleppmann</li> <li>System Design Interview \u2013 Alex Xu</li> </ul>"},{"location":"references/#blogs","title":"Blogs","text":"<ul> <li>Uber Engineering Blog</li> <li>Netflix Tech Blog</li> </ul>"},{"location":"references/#community","title":"Community","text":"<ul> <li>Awesome System Design</li> <li>System Design Primer</li> </ul>"},{"location":"references/#standards","title":"Standards","text":"<ul> <li>RFC 7231 (HTTP/1.1)</li> <li>REST API Design Guidelines (Microsoft)</li> </ul>"},{"location":"hld/architecture/","title":"System Architecture Example","text":""},{"location":"hld/architecture/#overview","title":"Overview","text":"<p>This document describes the architecture of a sample distributed system, including major components and their interactions.</p>"},{"location":"hld/architecture/#system-context-diagram","title":"System Context Diagram","text":""},{"location":"hld/architecture/#main-components","title":"Main Components","text":"<ul> <li>API Gateway: Handles all client requests and routing.</li> <li>Service Layer: Business logic is implemented in modular services.</li> <li>Database: Stores persistent data, supports replication and backup.</li> <li>Cache: Improves read performance and reduces DB load.</li> <li>Message Queue: Decouples services and enables async processing.</li> <li>Monitoring &amp; Logging: Provides observability.</li> </ul>"},{"location":"hld/architecture/#key-design-decisions","title":"Key Design Decisions","text":"<ul> <li>Technology stack: Python (FastAPI), PostgreSQL, Redis, RabbitMQ, Prometheus/Grafana</li> <li>Scalability: Each component can be scaled horizontally.</li> <li>Security: JWT-based authentication at API layer.</li> <li>Resilience: Retry policies, timeouts, health checks.</li> </ul>"},{"location":"hld/architecture/#sequence-diagram","title":"Sequence Diagram","text":"<p>Add relevant sequence diagrams for user flows here.</p> <p>Feel free to replace this sample with your own system\u2019s architecture!</p>"},{"location":"hld/overview/","title":"High-Level Design (HLD) Overview","text":"<p>This section provides a bird\u2019s-eye view of system architectures, their major components, interactions, and key design decisions.</p>"},{"location":"hld/overview/#what-is-high-level-design","title":"What is High-Level Design?","text":"<p>High-Level Design (HLD) covers: - System architecture and main components - Data flow between subsystems - Technology stack choices - Major APIs and integrations - Non-functional considerations (scalability, fault-tolerance, security, etc.)</p>"},{"location":"hld/overview/#contents","title":"Contents","text":"<ul> <li>Architecture</li> <li>Diagrams</li> <li>Design Decisions</li> </ul>"},{"location":"hld/overview/#when-to-use-hld","title":"When to use HLD?","text":"<ul> <li>During initial project scoping</li> <li>For design reviews and presentations</li> <li>When comparing architecture alternatives</li> </ul> <p>Start with <code>architecture.md</code> for an example system!</p>"},{"location":"lld/module1/","title":"Module 1 \u2013 User Management Service (LLD)","text":""},{"location":"lld/module1/#overview","title":"Overview","text":"<p>This module handles all operations related to user accounts, authentication, and profiles.</p>"},{"location":"lld/module1/#class-diagram","title":"Class Diagram","text":""},{"location":"lld/module1/#main-classes","title":"Main Classes","text":"<ul> <li>UserService: Core logic for user operations.</li> <li>UserRepository: Interface for DB operations.</li> <li>AuthManager: Handles authentication, password hashing, JWT generation.</li> </ul>"},{"location":"lld/module1/#key-methods","title":"Key Methods","text":"<p>```python class UserService:     def register_user(self, email, password): ...     def authenticate(self, email, password): ...     def get_user_profile(self, user_id): ...</p>"},{"location":"lld/module2/","title":"Module 2 \u2013 Notification Service (LLD)","text":""},{"location":"lld/module2/#overview","title":"Overview","text":"<p>The Notification Service handles all outgoing notifications\u2014such as emails, SMS messages, and push notifications\u2014triggered by various system events.</p>"},{"location":"lld/module2/#class-diagram","title":"Class Diagram","text":""},{"location":"lld/module2/#main-classes-and-their-roles","title":"Main Classes and Their Roles","text":""},{"location":"lld/module2/#1-notificationmanager","title":"1. NotificationManager","text":"<p>Central coordinator for all notification events. Determines channel(s) and dispatches to the appropriate sender class.</p> <pre><code>class NotificationManager:\n    def __init__(self, email_sender, sms_sender, push_notifier):\n        self.email_sender = email_sender\n        self.sms_sender = sms_sender\n        self.push_notifier = push_notifier\n\n    def send_notification(self, user, message, channels):\n        \"\"\"Send notification to user via specified channels.\"\"\"\n        results = {}\n        if \"email\" in channels:\n            results[\"email\"] = self.email_sender.send_email(user.email, message)\n        if \"sms\" in channels:\n            results[\"sms\"] = self.sms_sender.send_sms(user.phone, message)\n        if \"push\" in channels:\n            results[\"push\"] = self.push_notifier.send_push(user.device_id, message)\n        return results\n</code></pre>"},{"location":"lld/module2/#2-emailsender","title":"2. EmailSender","text":"<p>Handles all email-related sending logic (using SMTP or an external service).</p> <pre><code>import smtplib\n\nclass EmailSender:\n    def __init__(self, smtp_server, port, login, password):\n        self.smtp_server = smtp_server\n        self.port = port\n        self.login = login\n        self.password = password\n\n    def send_email(self, recipient, message):\n        # Placeholder; use real library in prod!\n        print(f\"Sending EMAIL to {recipient}: {message}\")\n        return True\n</code></pre>"},{"location":"lld/module2/#3-smssender","title":"3. SmsSender","text":"<p>Handles SMS sending (using a third-party gateway API).</p> <pre><code>class SmsSender:\n    def __init__(self, api_key):\n        self.api_key = api_key\n\n    def send_sms(self, phone, message):\n        print(f\"Sending SMS to {phone}: {message}\")\n        return True\n</code></pre>"},{"location":"lld/module2/#4-pushnotifier","title":"4. PushNotifier","text":"<p>Handles push notifications (e.g., using Firebase Cloud Messaging).</p> <pre><code>class PushNotifier:\n    def __init__(self, fcm_key):\n        self.fcm_key = fcm_key\n\n    def send_push(self, device_id, message):\n        print(f\"Sending PUSH notification to device {device_id}: {message}\")\n        return True\n</code></pre>"},{"location":"lld/module2/#example-usage","title":"Example Usage","text":"<pre><code># Example user object\nclass User:\n    def __init__(self, email, phone, device_id):\n        self.email = email\n        self.phone = phone\n        self.device_id = device_id\n\nemail_sender = EmailSender(\"smtp.mail.com\", 587, \"login\", \"password\")\nsms_sender = SmsSender(\"api-key-123\")\npush_notifier = PushNotifier(\"fcm-key-xyz\")\n\nnotifier = NotificationManager(email_sender, sms_sender, push_notifier)\n\nuser = User(\"test@example.com\", \"+911234567890\", \"device123\")\nchannels = [\"email\", \"push\"]\nnotifier.send_notification(user, \"Welcome to System Design Hub!\", channels)\n</code></pre>"},{"location":"lld/module2/#sequence-flow","title":"Sequence Flow","text":"<ol> <li>An event triggers a notification.</li> <li><code>NotificationManager.send_notification()</code> is called.</li> <li>It decides channels, then delegates sending to each sender class.</li> <li>Each sender class implements the sending logic (log, API call, etc).</li> </ol>"},{"location":"lld/module2/#error-handling-and-extensibility","title":"Error Handling and Extensibility","text":"<ul> <li>Each sender can log errors, retry failed deliveries, or raise exceptions.</li> <li>New channels (e.g., WhatsAppSender) can be added by extending the manager.</li> </ul> <p>Expand this code with your real-world integrations, error handling, and configs!</p>"}]}